//--------------------------------------------------------------------------
// This file is generated by the SeRoNet Tooling. The SeRoNet Tooling is 
// developed by the SeRoNet Project consortium: 
// http://www.seronet-projekt.de
//
// The ROS Mixed-Port Component is developed by:
// Service Robotics Research Center of Ulm University of Applied Sciences
// Fraunhofer Institute for Manufacturing Engineering and Automation IPA
//
// This code-generator uses infrastructure of the SmartMDSD Toolchain on
// which the SeRoNet Tooling is based on.
//
// CAUTION: 
// This software is a preview for the purpose of technology demonstration. 
// It is experimental and comes with no support. Use at your own risk.
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentRosJoystickRosPortExtension.hh"

// statically create a global PlainOpcUaComponentRosJoystickExtension instance
static ComponentRosJoystickRosPortExtension ros_port_extension;

ComponentRosJoystickRosPortExtension::ComponentRosJoystickRosPortExtension()
:	ComponentRosJoystickExtension("ComponentRosJoystickRosPortExtension")
{
	nh = 0;
	callbacksPtr = 0;
}

ComponentRosJoystickRosPortExtension::~ComponentRosJoystickRosPortExtension()
{  }

void ComponentRosJoystickRosPortExtension::loadParameters(const SmartACE::SmartIniParameter &parameter)
{  }

void ComponentRosJoystickRosPortExtension::initialize(ComponentRosJoystick *component, int argc, char* argv[])
{
	ros::init(argc, argv, "ComponentRosJoystick", ros::init_options::NoSigintHandler);
	nh = new ros::NodeHandle();
	
	callbacksPtr = new ComponentRosJoystickRosPortCallbacks();
	
	component->rosPorts = this;
	
	_joy = nh->subscribe("/joy", 10, &ComponentRosJoystickRosPortCallbacks::_joy_cb, callbacksPtr);
}

int ComponentRosJoystickRosPortExtension::onStartup()
{
	return startExtensionThread();
}

int ComponentRosJoystickRosPortExtension::extensionExecution()
{
	ros::spin();
	return 0;
}

int ComponentRosJoystickRosPortExtension::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	ros::shutdown();
	return stopExtensionThread(timeoutTime);
}

void ComponentRosJoystickRosPortExtension::destroy()
{
	delete nh;
	delete callbacksPtr;
}
