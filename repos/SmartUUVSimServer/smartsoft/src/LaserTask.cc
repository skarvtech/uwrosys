//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "LaserTask.hh"
#include "SmartUUVSimServer.hh"

#include <iostream>

LaserTask::LaserTask(SmartACE::SmartComponent *comp) 
:	LaserTaskCore(comp)
,	counter(0)
{
	std::cout << "constructor LaserTask\n";
}
LaserTask::~LaserTask() 
{
	std::cout << "destructor LaserTask\n";
}



int LaserTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int LaserTask::on_execute()
{
	CommBasicObjects::CommBaseState commCurrentBaseState;

	CommBasicObjects::CommMobileLaserScan commMobileLaserScan = COMP->queue->removeEntry();
	
	commCurrentBaseState.set_base_position(COMP->pose->getBasePose());
	commCurrentBaseState.set_base_raw_position(COMP->pose->getBasePose());
	commCurrentBaseState.set_base_velocity(COMP->velocity->getBaseVelocity());

	commMobileLaserScan.set_base_state(commCurrentBaseState);
	commMobileLaserScan.set_scan_update_count(counter++);

	// publish laser-scan update
	this->laserServiceOutPut(commMobileLaserScan);
	return 0;
}
int LaserTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
