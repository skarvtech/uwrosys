//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2017 Timo Blender
//
//      schlegel@hs-ulm.de
//
//      Service Robotics Ulm
//      University of Applied Sciences
//      Prittwitzstr. 10
//      89075 Ulm
//      Germany
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//-------------------------------------------------------------------------

#include "CompHandler.hh"
#include "SmartUUVSimServer.hh"

#include <iostream>

// include communication objects
#include <CommBasicObjects/CommBasePositionUpdate.hh>
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommMobileLaserScan.hh>
#include <CommBasicObjects/CommNavigationVelocity.hh>
#include <CommBasicObjects/CommVoid.hh>

void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	Smart::StatusCode status;

	COMP->pollForGazeboConnection->start();

	COMP->connectionEstablished.acquire();

	COMP->pollForGazeboConnection->stop();

	// Connect to topics

	gazebo::transport::NodePtr sendVelNode(new gazebo::transport::Node());
	sendVelNode->Init();

	COMP->sendVelTopic = sendVelNode->Advertise<gazebo::msgs::Vector3d>(COMP->getGlobalState().getSettings().getSendVelTopic());
	std::cout << "Wait for topic connection ..." << std::endl;
	COMP->sendVelTopic->WaitForConnection();
	std::cout << "connected" << std::endl;

	COMP->queue = new Queue();
	COMP->laser = new LaserScan(COMP->queue);
	COMP->laser->init();
	COMP->pose = new BasePose();
	COMP->pose->init();
	COMP->velocity = new BaseVelocity();
	COMP->velocity->init();

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	status = COMP->connectAndStartAllServices();
	
	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	//COMP->startAllTasks();

	// start task BaseStateTask
	if(COMP->connections.baseStateTask.scheduler != "DEFAULT") {
		ACE_Sched_Params baseStateTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(COMP->connections.baseStateTask.scheduler == "FIFO") {
			baseStateTask_SchedParams.policy(ACE_SCHED_FIFO);
			baseStateTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(COMP->connections.baseStateTask.scheduler == "RR") {
			baseStateTask_SchedParams.policy(ACE_SCHED_RR);
			baseStateTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		COMP->baseStateTask->start(baseStateTask_SchedParams, COMP->connections.baseStateTask.cpuAffinity);
	} else {
		COMP->baseStateTask->start();
	}
	// start task LaserTask
	if(COMP->connections.laserTask.scheduler != "DEFAULT") {
		ACE_Sched_Params laserTask_SchedParams(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(COMP->connections.laserTask.scheduler == "FIFO") {
			laserTask_SchedParams.policy(ACE_SCHED_FIFO);
			laserTask_SchedParams.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(COMP->connections.laserTask.scheduler == "RR") {
			laserTask_SchedParams.policy(ACE_SCHED_RR);
			laserTask_SchedParams.priority(ACE_THR_PRI_RR_MIN);
		}
		COMP->laserTask->start(laserTask_SchedParams, COMP->connections.laserTask.cpuAffinity);
	} else {
		COMP->laserTask->start();
	}
	
	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";

	delete COMP->laser;
	delete COMP->pose;
	delete COMP->velocity;

	delete COMP->queue;

	gazebo::client::shutdown();
}
