//--------------------------------------------------------------------------
// This file is generated by the SeRoNet Tooling. The SeRoNet Tooling is 
// developed by the SeRoNet Project consortium: 
// http://www.seronet-projekt.de
//
// The ROS Mixed-Port Component is developed by:
// Service Robotics Research Center of Ulm University of Applied Sciences
// Fraunhofer Institute for Manufacturing Engineering and Automation IPA
//
// This code-generator uses infrastructure of the SmartMDSD Toolchain on
// which the SeRoNet Tooling is based on.
//
// CAUTION: 
// This software is a preview for the purpose of technology demonstration. 
// It is experimental and comes with no support. Use at your own risk.
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentUUVSimulatorRosPortExtension.hh"

// statically create a global PlainOpcUaComponentUUVSimulatorExtension instance
static ComponentUUVSimulatorRosPortExtension ros_port_extension;

ComponentUUVSimulatorRosPortExtension::ComponentUUVSimulatorRosPortExtension()
:	ComponentUUVSimulatorExtension("ComponentUUVSimulatorRosPortExtension")
{
	nh = 0;
	callbacksPtr = 0;
}

ComponentUUVSimulatorRosPortExtension::~ComponentUUVSimulatorRosPortExtension()
{  }

void ComponentUUVSimulatorRosPortExtension::loadParameters(const SmartACE::SmartIniParameter &parameter)
{  }

void ComponentUUVSimulatorRosPortExtension::initialize(ComponentUUVSimulator *component, int argc, char* argv[])
{
	ros::init(argc, argv, "ComponentUUVSimulator", ros::init_options::NoSigintHandler);
	nh = new ros::NodeHandle();
	callbacksPtr = new ComponentUUVSimulatorRosPortCallbacks();
	component->rosPorts = this;
	
	_cmd_vel = nh->advertise<geometry_msgs::Twist>("/rexrov/cmd_vel", 10);
	_pose = nh->subscribe("/rexrov/pose_gt", 10, &ComponentUUVSimulatorRosPortCallbacks::_pose_cb, callbacksPtr);
}

void ComponentUUVSimulatorRosPortBaseClass::_cmd_vel_publish_ros_msg(const geometry_msgs::Twist &msg){
	_cmd_vel.publish(msg);
}

int ComponentUUVSimulatorRosPortExtension::onStartup()
{
	return startExtensionThread();
}

int ComponentUUVSimulatorRosPortExtension::extensionExecution()
{
	ros::spin();
	return 0;
}

int ComponentUUVSimulatorRosPortExtension::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	ros::shutdown();
	return stopExtensionThread(timeoutTime);
}

void ComponentUUVSimulatorRosPortExtension::destroy()
{
	delete nh;
	delete callbacksPtr;
}
