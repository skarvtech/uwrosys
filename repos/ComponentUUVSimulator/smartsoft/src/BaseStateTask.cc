//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "BaseStateTask.hh"
#include "ComponentUUVSimulator.hh"

#include <iostream>

BaseStateTask::BaseStateTask(SmartACE::SmartComponent *comp) 
:	BaseStateTaskCore(comp)
{
	std::cout << "constructor BaseStateTask\n";
}
BaseStateTask::~BaseStateTask() 
{
	std::cout << "destructor BaseStateTask\n";
}

void BaseStateTask::update_pose(const nav_msgs::Odometry::ConstPtr &msg)
{
	// !!! Do not use cout or sleep within this callback function !!!

	CommBasicObjects::CommBasePose commBasePose;

	// Set position
	commBasePose.set_x(msg->pose.pose.position.x, 1);
	commBasePose.set_y(msg->pose.pose.position.y, 1);
	commBasePose.set_z(msg->pose.pose.position.z, 1);

	// See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
	double xsqr = msg->pose.pose.orientation.x * msg->pose.pose.orientation.x;
	double ysqr = msg->pose.pose.orientation.y * msg->pose.pose.orientation.y;
	double zsqr = msg->pose.pose.orientation.z * msg->pose.pose.orientation.z;

	// Set yaw
	double siny_cosp = +2.0 * (msg->pose.pose.orientation.w * msg->pose.pose.orientation.z + msg->pose.pose.orientation.x * msg->pose.pose.orientation.y);
	double cosy_cosp = +1.0 - 2.0 * (ysqr + zsqr);
	double yaw = std::atan2(siny_cosp, cosy_cosp);
	commBasePose.set_base_azimuth(yaw);

	// Set pitch
	double theta;
	double sinp = +2.0 * (msg->pose.pose.orientation.w * msg->pose.pose.orientation.y - msg->pose.pose.orientation.z * msg->pose.pose.orientation.x);
	if(std::abs(sinp) >= 1)
		theta = std::copysign(M_PI / 2, sinp); // Use 90 degrees if out of range
	else
		theta = std::asin(sinp);
	commBasePose.set_base_elevation(theta);

	// Set roll
	double sinr_cosp = +2.0 * (msg->pose.pose.orientation.w * msg->pose.pose.orientation.x + msg->pose.pose.orientation.y * msg->pose.pose.orientation.z);
	double cosr_cosp = +1.0 - 2.0 * (xsqr + ysqr);
	double roll = std::atan2(sinr_cosp, cosr_cosp);
	commBasePose.set_base_roll(roll);

	// Copy pose
	std::unique_lock<std::mutex> lck (m_mtx);
	this->m_commBasePose = commBasePose;
}

CommBasicObjects::CommBasePose BaseStateTask::getBasePose() {
	std::unique_lock<std::mutex> lck (m_mtx);
	CommBasicObjects::CommBasePose pose = this->m_commBasePose;
	return pose;
}

int BaseStateTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int BaseStateTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	CommBasicObjects::CommBaseState commCurrentBaseState;

	// publish base state update
	commCurrentBaseState.set_base_position(this->getBasePose());
	commCurrentBaseState.set_base_raw_position(this->getBasePose());
	//commCurrentBaseState.set_base_velocity(this->getVelocity());

	// add timestamp
	CommBasicObjects::CommTimeStamp time_stamp;
	time_stamp.set_now();
	commCurrentBaseState.set_time_stamp(time_stamp);

	Smart::StatusCode status = this->baseStateServiceOutPut(commCurrentBaseState);

	std::cout << "Position: " << commCurrentBaseState.get_base_position() << std::endl;

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int BaseStateTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
