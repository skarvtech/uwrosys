//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _COMPONENTUUVMANIPULATOR_HH
#define _COMPONENTUUVMANIPULATOR_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "ComponentUUVManipulatorCore.hh"

#include "ComponentUUVManipulatorPortFactoryInterface.hh"
#include "ComponentUUVManipulatorExtension.hh"

// forward declarations
class ComponentUUVManipulatorPortFactoryInterface;
class ComponentUUVManipulatorExtension;

// includes for ComponentUUVManipulatorROSExtension
#include "ComponentUUVManipulatorRosPortBaseClass.hh"

// includes for OpcUaBackendComponentGeneratorExtension

// includes for PlainOpcUaComponentUUVManipulatorExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <CommBasicObjects/CommNavigationVelocity.hh>
#include <CommBasicObjects/CommNavigationVelocityACE.hh>

// include tasks
#include "ManipulatorCommandTask.hh"
// include UpcallManagers
#include "NavigationVelocityServiceInUpcallManager.hh"

// include input-handler(s)
#include "NavigationVelocityServiceInHandler.hh"
// include request-handler(s)

// include handler
#include "CompHandler.hh"


#include "SmartStateChangeHandler.hh"

#define COMP ComponentUUVManipulator::instance()

class ComponentUUVManipulator : public ComponentUUVManipulatorCore {
private:
	static ComponentUUVManipulator *_componentUUVManipulator;
	
	// constructor
	ComponentUUVManipulator();
	
	// copy-constructor
	ComponentUUVManipulator(const ComponentUUVManipulator& cc);
	
	// destructor
	~ComponentUUVManipulator() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, ComponentUUVManipulatorPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, ComponentUUVManipulatorExtension*> componentExtensionRegistry;
	
public:
	
	// define tasks
	Smart::TaskTriggerSubject* manipulatorCommandTaskTrigger;
	ManipulatorCommandTask *manipulatorCommandTask;
	
	// define input-ports
	// InputPort NavigationVelocityServiceIn
	Smart::ISendServerPattern<CommBasicObjects::CommNavigationVelocity> *navigationVelocityServiceIn;
	Smart::InputTaskTrigger<CommBasicObjects::CommNavigationVelocity> *navigationVelocityServiceInInputTaskTrigger;
	NavigationVelocityServiceInUpcallManager *navigationVelocityServiceInUpcallManager;
	
	// define request-ports
	
	// define input-handler
	NavigationVelocityServiceInHandler *navigationVelocityServiceInHandler;
	
	// define output-ports
	
	// define answer-ports
	
	// define request-handlers
	
	// definitions of ComponentUUVManipulatorROSExtension
	ComponentUUVManipulatorRosPortBaseClass *rosPorts;
	
	// definitions of OpcUaBackendComponentGeneratorExtension
	
	// definitions of PlainOpcUaComponentUUVManipulatorExtension
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, ComponentUUVManipulatorPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(ComponentUUVManipulatorExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	

	// return singleton instance
	static ComponentUUVManipulator* instance()
	{
		if(_componentUUVManipulator == 0) {
			_componentUUVManipulator = new ComponentUUVManipulator();
		}
		return _componentUUVManipulator;
	}
	
	static void deleteInstance() {
		if(_componentUUVManipulator != 0) {
			delete _componentUUVManipulator;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct ManipulatorCommandTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} manipulatorCommandTask;
		
		//--- upcall parameter ---
		struct NavigationVelocityServiceInHandler_struct {
			int prescale;
		} navigationVelocityServiceInHandler;
		
		//--- server port parameter ---
		struct NavigationVelocityServiceIn_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} navigationVelocityServiceIn;
	
		//--- client port parameter ---
		
		// -- parameters for ComponentUUVManipulatorROSExtension
		
		// -- parameters for OpcUaBackendComponentGeneratorExtension
		
		// -- parameters for PlainOpcUaComponentUUVManipulatorExtension
		
	} connections;
};
#endif
